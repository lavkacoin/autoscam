import telebot
from telebot import types
import config
import requests

bot = telebot.TeleBot(config.TOKEN)
HEADERS_ROCKET = {'Rocket-Pay-Key' : config.ROCKET_TOKEN}

#–°–∫–∞–º —á–µ—Ä–µ–∑ Tonkeeper

def process_amount_step_tonkeeper(message):
            try:
                amount = int(message.text)
                link = f"https://app.tonkeeper.com/transfer/EQAHbfM0HD19bzOi-KTDIr5wwvmOYPBeIrnFmJ-6gvbBcCeI?amount={amount*1000000000}"
                bot.send_message(chat_id=message.chat.id, text=link)
            except ValueError:
                bot.send_message(chat_id=message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

#–°–∫–∞–º —á–µ—Ä–µ–∑ Tonhub

def process_amount_step_tonhub(message):
            try:
                amount = int(message.text)
                link = f"https://tonhub.com/transfer/EQAHbfM0HD19bzOi-KTDIr5wwvmOYPBeIrnFmJ-6gvbBcCeI?amount={amount*1000000000}"
                bot.send_message(chat_id=message.chat.id, text=link)
            except ValueError:
                bot.send_message(chat_id=message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

#–°–∫–∞–º —á–µ—Ä–µ–∑ TonRocket

def process_amount_step_rocket(message):
    try:
        amount = int(message.text)
        payload = {
                    "amount": amount,
                    "numPayments": 1,
                    "currency": "TONCOIN",
                    "description": "Pay to get scammed",
                    "hiddenMessage": "thank you",
                    "callbackUrl": "https://t.me/lavkaton",
                    "expiredIn": 300
                }
        response = requests.post("https://pay.ton-rocket.com/tg-invoices", headers=HEADERS_ROCKET, json=payload)
        if response.status_code == 200:
            link = response.json()['link']
            bot.send_message(chat_id=message.chat.id, text=link)
        else:
            bot.send_message(chat_id=message.chat.id, text="Failed to create invoice. Please try again later.")
    except ValueError:
        bot.send_message(chat_id=message.chat.id, text="Invalid amount. Please enter a valid amount.")

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    btn2 = types.KeyboardButton('üá¨üáß English')
    markup.add(btn1, btn2)

    bot.send_message(message.from_user.id, "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    #–†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üí∞ –ó–ê–°–ö–ê–ú–ò–¢–¨–°–Ø")
        btn2 = types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞')
        markup.row(btn1)
        markup.row(btn2)
        bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LAVKA autoscam. \n \n LAVKA autoscam —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –¥–ª—è —Å–∫–∞–º–∞. –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –ø–æ–∫—É–ø–∞—Ç—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ NFT —á—Ç–æ–±—ã –∑–∞—Å–∫–∞–º–∏—Ç—å—Å—è, –∂–¥–∞—Ç—å —Å–∫–∞–º–µ—Ä–æ–≤ - —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. \n \n –ê —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —ç—Ç–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ + –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ LAVKA Foundation \n \n [–ö–∞–Ω–∞–ª](https://t.me/lavkaton) | [–°–∞–π—Ç](lavkafoundation.fun) | [GitHub](https://github.com/orgs/lavkacoin/repositories) ', reply_markup=markup, parse_mode='Markdown')

    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞':
         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
         btn1 = types.KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π")
         btn2 = types.KeyboardButton('üá¨üáß English')
         markup.add(btn1, btn2)

         bot.send_message(message.from_user.id, "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language", reply_markup=markup)

    elif message.text == 'üí∞ –ó–ê–°–ö–ê–ú–ò–¢–¨–°–Ø':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üíé Tonkeeper")
        btn2 = types.KeyboardButton('üíé Tonhub')
        btn3 = types.KeyboardButton('üöÄ Ton Rocket')
        btn4 = types.KeyboardButton('üíé CryptoBot')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        bot.send_message(message.from_user.id, '–ß–µ—Ä–µ–∑ —á—Ç–æ –±—É–¥–µ–º —Å–∫–∞–º–∏—Ç—å—Å—è?', reply_markup=markup, parse_mode='Markdown')

    elif message.text == 'üíé Tonkeeper':
        bot.send_message(chat_id=message.chat.id, text="–ù–∞ —Å–∫–æ–ª—å–∫–æ TON —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–∫–∞–º–∏—Ç—å—Å—è?")
        bot.register_next_step_handler(message, process_amount_step_tonkeeper)

    elif message.text == 'üíé Tonhub':
        bot.send_message(chat_id=message.chat.id, text="–ù–∞ —Å–∫–æ–ª—å–∫–æ TON —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–∫–∞–º–∏—Ç—å—Å—è?")
        bot.register_next_step_handler(message, process_amount_step_tonhub)
    
    elif message.text == 'üöÄ Ton Rocket':
        bot.send_message(chat_id=message.chat.id, text="–ù–∞ —Å–∫–æ–ª—å–∫–æ TON —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–∫–∞–º–∏—Ç—å—Å—è?")
        bot.register_next_step_handler(message, process_amount_step_rocket)
    
    elif message.text == 'üíé CryptoBot':
        bot.send_message(chat_id=message.chat.id, text="–ù–∞ —Å–∫–æ–ª—å–∫–æ TON —Ö–æ—Ç–∏—Ç–µ –∑–∞—Å–∫–∞–º–∏—Ç—å—Å—è?")
        bot.register_next_step_handler(message, process_amount_step_rocket)

bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å
